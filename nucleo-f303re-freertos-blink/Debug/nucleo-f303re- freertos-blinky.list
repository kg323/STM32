
nucleo-f303re- freertos-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005f80  08005f80  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f80  08005f80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001a40  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001a50  20001a50  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187af  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003030  00000000  00000000  000387ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c36  00000000  00000000  0003dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017078  00000000  00000000  000409de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c20  00000000  00000000  00057a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a676  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000514c  00000000  00000000  0012a6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ec0 	.word	0x08005ec0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005ec0 	.word	0x08005ec0

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fa90 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f826 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8b2 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f880 	bl	80002f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f003 f8e0 	bl	80033b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <main+0x40>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x44>)
 80001fe:	f003 f943 	bl	8003488 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <main+0x48>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x4c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x50>)
 800020e:	f003 f93b 	bl	8003488 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a07      	ldr	r2, [pc, #28]	; (8000234 <main+0x54>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f003 f902 	bl	8003420 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x3c>
 800021e:	bf00      	nop
 8000220:	08005f00 	.word	0x08005f00
 8000224:	08000421 	.word	0x08000421
 8000228:	200000b0 	.word	0x200000b0
 800022c:	08005f24 	.word	0x08005f24
 8000230:	0800043d 	.word	0x0800043d
 8000234:	200000b4 	.word	0x200000b4

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b0a6      	sub	sp, #152	; 0x98
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f005 fe32 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2258      	movs	r2, #88	; 0x58
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f005 fe24 	bl	8005eb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fd0a 	bl	8000cb0 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a2:	f000 f8eb 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd48 	bl	8001d58 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ce:	f000 f8d5 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 ffa3 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e8:	f000 f8c8 	bl	800047c <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3798      	adds	r7, #152	; 0x98
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	f002 fc6a 	bl	8002c10 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f89b 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	; 0x28
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a24      	ldr	r2, [pc, #144]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a18      	ldr	r2, [pc, #96]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2120      	movs	r1, #32
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f000 fc3b 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0xc8>)
 80003ee:	f000 faa3 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f2:	2320      	movs	r3, #32
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f000 fa94 	bl	8000938 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3728      	adds	r7, #40	; 0x28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48000800 	.word	0x48000800

08000420 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000428:	2120      	movs	r1, #32
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 fc25 	bl	8000c7c <HAL_GPIO_TogglePin>
    osDelay(800);
 8000432:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000436:	f003 f8d1 	bl	80035dc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800043a:	e7f5      	b.n	8000428 <StartBlink01+0x8>

0800043c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000444:	2120      	movs	r1, #32
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 fc17 	bl	8000c7c <HAL_GPIO_TogglePin>
    osDelay(1000);
 800044e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000452:	f003 f8c3 	bl	80035dc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000456:	e7f5      	b.n	8000444 <StartBlink02+0x8>

08000458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d101      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800046a:	f000 f963 	bl	8000734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40001000 	.word	0x40001000

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x4c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <HAL_MspInit+0x4c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x4c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x4c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <HAL_MspInit+0x4c>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x4c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	210f      	movs	r1, #15
 80004c2:	f06f 0001 	mvn.w	r0, #1
 80004c6:	f000 fa0d 	bl	80008e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <HAL_UART_MspInit+0x7c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d128      	bne.n	800054c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_UART_MspInit+0x80>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800052a:	230c      	movs	r3, #12
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800053a:	2307      	movs	r3, #7
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f000 f9f6 	bl	8000938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40004400 	.word	0x40004400
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000564:	2300      	movs	r3, #0
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800056c:	4b33      	ldr	r3, [pc, #204]	; (800063c <HAL_InitTick+0xe0>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a32      	ldr	r2, [pc, #200]	; (800063c <HAL_InitTick+0xe0>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b30      	ldr	r3, [pc, #192]	; (800063c <HAL_InitTick+0xe0>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000584:	f107 0210 	add.w	r2, r7, #16
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fe18 	bl	80021c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800059e:	f001 fdcd 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80005a2:	6378      	str	r0, [r7, #52]	; 0x34
 80005a4:	e004      	b.n	80005b0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005a6:	f001 fdc9 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80005aa:	4603      	mov	r3, r0
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <HAL_InitTick+0xe4>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	0c9b      	lsrs	r3, r3, #18
 80005ba:	3b01      	subs	r3, #1
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <HAL_InitTick+0xe8>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_InitTick+0xec>)
 80005c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_InitTick+0xe8>)
 80005c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <HAL_InitTick+0xe8>)
 80005ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_InitTick+0xe8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <HAL_InitTick+0xe8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_InitTick+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <HAL_InitTick+0xe8>)
 80005e6:	f002 f83d 	bl	8002664 <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d11b      	bne.n	8000630 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <HAL_InitTick+0xe8>)
 80005fa:	f002 f895 	bl	8002728 <HAL_TIM_Base_Start_IT>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000604:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000608:	2b00      	cmp	r3, #0
 800060a:	d111      	bne.n	8000630 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800060c:	2036      	movs	r0, #54	; 0x36
 800060e:	f000 f985 	bl	800091c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d808      	bhi.n	800062a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	2036      	movs	r0, #54	; 0x36
 800061e:	f000 f961 	bl	80008e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_InitTick+0xf0>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	e002      	b.n	8000630 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000634:	4618      	mov	r0, r3
 8000636:	3738      	adds	r7, #56	; 0x38
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	431bde83 	.word	0x431bde83
 8000644:	200000b8 	.word	0x200000b8
 8000648:	40001000 	.word	0x40001000
 800064c:	20000004 	.word	0x20000004

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TIM6_DAC_IRQHandler+0x10>)
 8000682:	f002 f8c1 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000b8 	.word	0x200000b8

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SystemInit+0x20>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <SystemInit+0x20>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490e      	ldr	r1, [pc, #56]	; (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0b      	ldr	r4, [pc, #44]	; (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006de:	f7ff ffd7 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f005 fbb3 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e6:	f7ff fd7b 	bl	80001e0 <main>

080006ea <LoopForever>:

LoopForever:
    b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006f8:	08005f88 	.word	0x08005f88
  ldr r2, =_sbss
 80006fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000700:	20001a50 	.word	0x20001a50

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f8d8 	bl	80008ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	200f      	movs	r0, #15
 8000720:	f7ff ff1c 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff feb0 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x20>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x24>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_IncTick+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	20000104 	.word	0x20000104

0800075c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_GetTick+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000104 	.word	0x20000104

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <__NVIC_EnableIRQ+0x38>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff4c 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f6:	f7ff ff61 	bl	80007bc <__NVIC_GetPriorityGrouping>
 80008fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	6978      	ldr	r0, [r7, #20]
 8000902:	f7ff ffb1 	bl	8000868 <NVIC_EncodePriority>
 8000906:	4602      	mov	r2, r0
 8000908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff80 	bl	8000814 <__NVIC_SetPriority>
}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff54 	bl	80007d8 <__NVIC_EnableIRQ>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e160      	b.n	8000c0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8152 	beq.w	8000c04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	f003 0201 	and.w	r2, r3, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80ac 	beq.w	8000c04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <HAL_GPIO_Init+0x2f0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a5d      	ldr	r2, [pc, #372]	; (8000c28 <HAL_GPIO_Init+0x2f0>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b5b      	ldr	r3, [pc, #364]	; (8000c28 <HAL_GPIO_Init+0x2f0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a59      	ldr	r2, [pc, #356]	; (8000c2c <HAL_GPIO_Init+0x2f4>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aee:	d025      	beq.n	8000b3c <HAL_GPIO_Init+0x204>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a4f      	ldr	r2, [pc, #316]	; (8000c30 <HAL_GPIO_Init+0x2f8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d01f      	beq.n	8000b38 <HAL_GPIO_Init+0x200>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d019      	beq.n	8000b34 <HAL_GPIO_Init+0x1fc>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a4d      	ldr	r2, [pc, #308]	; (8000c38 <HAL_GPIO_Init+0x300>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d013      	beq.n	8000b30 <HAL_GPIO_Init+0x1f8>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_GPIO_Init+0x304>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00d      	beq.n	8000b2c <HAL_GPIO_Init+0x1f4>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <HAL_GPIO_Init+0x308>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0x1f0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <HAL_GPIO_Init+0x30c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_Init+0x1ec>
 8000b20:	2306      	movs	r3, #6
 8000b22:	e00c      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b24:	2307      	movs	r3, #7
 8000b26:	e00a      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b28:	2305      	movs	r3, #5
 8000b2a:	e008      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b30:	2303      	movs	r3, #3
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x206>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4e:	4937      	ldr	r1, [pc, #220]	; (8000c2c <HAL_GPIO_Init+0x2f4>)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b80:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f47f ae97 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	48001000 	.word	0x48001000
 8000c40:	48001400 	.word	0x48001400
 8000c44:	48001800 	.word	0x48001800
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43d9      	mvns	r1, r3
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f001 b83a 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 816f 	beq.w	8000fca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cec:	4bb5      	ldr	r3, [pc, #724]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d00c      	beq.n	8000d12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf8:	4bb2      	ldr	r3, [pc, #712]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d15c      	bne.n	8000dbe <HAL_RCC_OscConfig+0x10e>
 8000d04:	4baf      	ldr	r3, [pc, #700]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d155      	bne.n	8000dbe <HAL_RCC_OscConfig+0x10e>
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	095b      	lsrs	r3, r3, #5
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d102      	bne.n	8000d44 <HAL_RCC_OscConfig+0x94>
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	e015      	b.n	8000d70 <HAL_RCC_OscConfig+0xc0>
 8000d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d60:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d6c:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d74:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d78:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d7c:	fa92 f2a2 	rbit	r2, r2
 8000d80:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 8111 	beq.w	8000fc8 <HAL_RCC_OscConfig+0x318>
 8000da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000daa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8108 	bne.w	8000fc8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f000 bfc6 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d106      	bne.n	8000dde <HAL_RCC_OscConfig+0x12e>
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a7b      	ldr	r2, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e036      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000de2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x158>
 8000dee:	4b75      	ldr	r3, [pc, #468]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a74      	ldr	r2, [pc, #464]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e021      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x184>
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e00b      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a62      	ldr	r2, [pc, #392]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d059      	beq.n	8000f10 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc7e 	bl	800075c <HAL_GetTick>
 8000e60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e66:	f7ff fc79 	bl	800075c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d902      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f000 bf67 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_RCC_OscConfig+0x1fe>
 8000ea8:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x22a>
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ede:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ee2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000eee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0ab      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1b6>
 8000f0e:	e05c      	b.n	8000fca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc24 	bl	800075c <HAL_GetTick>
 8000f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fc1f 	bl	800075c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d902      	bls.n	8000f30 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f000 bf0d 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f44:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_OscConfig+0x2b2>
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x2de>
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_RCC_OscConfig+0x314>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f92:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f96:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f9a:	fa92 f2a2 	rbit	r2, r2
 8000f9e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fa2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fa6:	fab2 f282 	clz	r2, r2
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f042 0220 	orr.w	r2, r2, #32
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f002 021f 	and.w	r2, r2, #31
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ab      	bne.n	8000f1a <HAL_RCC_OscConfig+0x26a>
 8000fc2:	e002      	b.n	8000fca <HAL_RCC_OscConfig+0x31a>
 8000fc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 817f 	beq.w	80012de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe0:	4ba7      	ldr	r3, [pc, #668]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fec:	4ba4      	ldr	r3, [pc, #656]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d173      	bne.n	80010e0 <HAL_RCC_OscConfig+0x430>
 8000ff8:	4ba1      	ldr	r3, [pc, #644]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001004:	d16c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x430>
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001018:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x386>
 8001030:	4b93      	ldr	r3, [pc, #588]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	e013      	b.n	800105e <HAL_RCC_OscConfig+0x3ae>
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800104e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2202      	movs	r2, #2
 8001060:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001064:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001068:	fa92 f2a2 	rbit	r2, r2
 800106c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001070:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f002 021f 	and.w	r2, r2, #31
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3f6>
 8001090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d002      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f000 be52 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b76      	ldr	r3, [pc, #472]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	21f8      	movs	r1, #248	; 0xf8
 80010bc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010c4:	fa91 f1a1 	rbit	r1, r1
 80010c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010d0:	fab1 f181 	clz	r1, r1
 80010d4:	b2c9      	uxtb	r1, r1
 80010d6:	408b      	lsls	r3, r1
 80010d8:	4969      	ldr	r1, [pc, #420]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	e0fe      	b.n	80012de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8088 	beq.w	8001202 <HAL_RCC_OscConfig+0x552>
 80010f2:	2301      	movs	r3, #1
 80010f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001104:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001112:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fb1d 	bl	800075c <HAL_GetTick>
 8001122:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fb18 	bl	800075c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d902      	bls.n	800113e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	f000 be06 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001150:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x4be>
 8001168:	4b45      	ldr	r3, [pc, #276]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	e013      	b.n	8001196 <HAL_RCC_OscConfig+0x4e6>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001186:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	2202      	movs	r2, #2
 8001198:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800119c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011a0:	fa92 f2a2 	rbit	r2, r2
 80011a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f002 021f 	and.w	r2, r2, #31
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0af      	beq.n	8001128 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	21f8      	movs	r1, #248	; 0xf8
 80011de:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011e6:	fa91 f1a1 	rbit	r1, r1
 80011ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011f2:	fab1 f181 	clz	r1, r1
 80011f6:	b2c9      	uxtb	r1, r1
 80011f8:	408b      	lsls	r3, r1
 80011fa:	4921      	ldr	r1, [pc, #132]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e06d      	b.n	80012de <HAL_RCC_OscConfig+0x62e>
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001214:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001222:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	461a      	mov	r2, r3
 800122a:	2300      	movs	r3, #0
 800122c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fa95 	bl	800075c <HAL_GetTick>
 8001232:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fa90 	bl	800075c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d902      	bls.n	800124e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	f000 bd7e 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <HAL_RCC_OscConfig+0x5d4>
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <HAL_RCC_OscConfig+0x5d0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	e016      	b.n	80012ac <HAL_RCC_OscConfig+0x5fc>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800129c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012a8:	4bbf      	ldr	r3, [pc, #764]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	2202      	movs	r2, #2
 80012ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012b6:	fa92 f2a2 	rbit	r2, r2
 80012ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1ac      	bne.n	8001238 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8113 	beq.w	800151a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d07c      	beq.n	80013fe <HAL_RCC_OscConfig+0x74e>
 8001304:	2301      	movs	r3, #1
 8001306:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001316:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4ba2      	ldr	r3, [pc, #648]	; (80015ac <HAL_RCC_OscConfig+0x8fc>)
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	2301      	movs	r3, #1
 800132c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fa15 	bl	800075c <HAL_GetTick>
 8001332:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fa10 	bl	800075c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d902      	bls.n	800134e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	f000 bcfe 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001358:	fa93 f2a3 	rbit	r2, r3
 800135c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001360:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800136a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800136e:	2202      	movs	r2, #2
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	fa93 f2a3 	rbit	r2, r3
 8001380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001392:	2202      	movs	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f2a3 	rbit	r2, r3
 80013a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 80013b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ba:	2102      	movs	r1, #2
 80013bc:	6019      	str	r1, [r3, #0]
 80013be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	fa93 f1a3 	rbit	r1, r3
 80013cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d4:	6019      	str	r1, [r3, #0]
  return result;
 80013d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d09d      	beq.n	8001338 <HAL_RCC_OscConfig+0x688>
 80013fc:	e08d      	b.n	800151a <HAL_RCC_OscConfig+0x86a>
 80013fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001402:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800140e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fa93 f2a3 	rbit	r2, r3
 8001418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001420:	601a      	str	r2, [r3, #0]
  return result;
 8001422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001426:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800142a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x8fc>)
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	461a      	mov	r2, r3
 800143c:	2300      	movs	r3, #0
 800143e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff f98c 	bl	800075c <HAL_GetTick>
 8001444:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff f987 	bl	800075c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d902      	bls.n	8001460 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	f000 bc75 	b.w	8001d4a <HAL_RCC_OscConfig+0x109a>
 8001460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001464:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001468:	2202      	movs	r2, #2
 800146a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001470:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 80014ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d8:	2102      	movs	r1, #2
 80014da:	6019      	str	r1, [r3, #0]
 80014dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f1a3 	rbit	r1, r3
 80014ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014f2:	6019      	str	r1, [r3, #0]
  return result;
 80014f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d197      	bne.n	800144a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 81a5 	beq.w	800187a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_RCC_OscConfig+0x8f8>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_OscConfig+0x900>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d121      	bne.n	80015c0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_RCC_OscConfig+0x900>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x900>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001588:	f7ff f8e8 	bl	800075c <HAL_GetTick>
 800158c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	e010      	b.n	80015b4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff f8e3 	bl	800075c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d908      	bls.n	80015b4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e3d1      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	10908120 	.word	0x10908120
 80015b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <HAL_RCC_OscConfig+0xb3c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0e8      	beq.n	8001592 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x92e>
 80015d0:	4b87      	ldr	r3, [pc, #540]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a86      	ldr	r2, [pc, #536]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	e035      	b.n	800164a <HAL_RCC_OscConfig+0x99a>
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x958>
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a7f      	ldr	r2, [pc, #508]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a7c      	ldr	r2, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e020      	b.n	800164a <HAL_RCC_OscConfig+0x99a>
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x982>
 8001618:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a74      	ldr	r2, [pc, #464]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a71      	ldr	r2, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0x99a>
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a6b      	ldr	r2, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8081 	beq.w	800175e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff f87e 	bl	800075c <HAL_GetTick>
 8001660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f879 	bl	800075c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e365      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 800167e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001682:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c4:	601a      	str	r2, [r3, #0]
  return result;
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0xa3a>
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	e013      	b.n	8001712 <HAL_RCC_OscConfig+0xa62>
 80016ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016f2:	2202      	movs	r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001716:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800171a:	2102      	movs	r1, #2
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001722:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	fa92 f1a2 	rbit	r1, r2
 800172c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001730:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001734:	6011      	str	r1, [r2, #0]
  return result;
 8001736:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800173a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d084      	beq.n	8001666 <HAL_RCC_OscConfig+0x9b6>
 800175c:	e083      	b.n	8001866 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7fe fffd 	bl	800075c <HAL_GetTick>
 8001762:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7fe fff8 	bl	800075c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e2e4      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 8001780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001784:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001790:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0xb44>
 80017e6:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_RCC_OscConfig+0xb40>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	e017      	b.n	800181c <HAL_RCC_OscConfig+0xb6c>
 80017ec:	40007000 	.word	0x40007000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001812:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4bb3      	ldr	r3, [pc, #716]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001820:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001824:	2102      	movs	r1, #2
 8001826:	6011      	str	r1, [r2, #0]
 8001828:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800182c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	fa92 f1a2 	rbit	r1, r2
 8001836:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800183a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800183e:	6011      	str	r1, [r2, #0]
  return result;
 8001840:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001844:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f002 021f 	and.w	r2, r2, #31
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d180      	bne.n	8001768 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001866:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a9d      	ldr	r2, [pc, #628]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 825e 	beq.w	8001d48 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	f000 821f 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	f040 8170 	bne.w	8001b8c <HAL_RCC_OscConfig+0xedc>
 80018ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018d0:	601a      	str	r2, [r3, #0]
  return result;
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018da:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7fe ff33 	bl	800075c <HAL_GetTick>
 80018f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ff2e 	bl	800075c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e21c      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001930:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001934:	601a      	str	r2, [r3, #0]
  return result;
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800193e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0xcaa>
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e027      	b.n	80019aa <HAL_RCC_OscConfig+0xcfa>
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b6:	6011      	str	r1, [r2, #0]
 80019b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	fa92 f1a2 	rbit	r1, r2
 80019c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ca:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019ce:	6011      	str	r1, [r2, #0]
  return result;
 80019d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	fab2 f282 	clz	r2, r2
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f042 0220 	orr.w	r2, r2, #32
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f002 021f 	and.w	r2, r2, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d182      	bne.n	80018fc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	4937      	ldr	r1, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6a19      	ldr	r1, [r3, #32]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	492d      	ldr	r1, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fe6d 	bl	800075c <HAL_GetTick>
 8001a82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe fe68 	bl	800075c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e156      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac0:	601a      	str	r2, [r3, #0]
  return result;
 8001ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0xe3c>
 8001ae0:	4b01      	ldr	r3, [pc, #4]	; (8001ae8 <HAL_RCC_OscConfig+0xe38>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e02a      	b.n	8001b3c <HAL_RCC_OscConfig+0xe8c>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0x10a4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b48:	6011      	str	r1, [r2, #0]
 8001b4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b4e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	fa92 f1a2 	rbit	r1, r2
 8001b58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b5c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b66:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f43f af7f 	beq.w	8001a88 <HAL_RCC_OscConfig+0xdd8>
 8001b8a:	e0dd      	b.n	8001d48 <HAL_RCC_OscConfig+0x1098>
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb0:	601a      	str	r2, [r3, #0]
  return result;
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe fdc3 	bl	800075c <HAL_GetTick>
 8001bd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e009      	b.n	8001bf0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe fdbe 	bl	800075c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0ac      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0xf8a>
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x10a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e027      	b.n	8001c8a <HAL_RCC_OscConfig+0xfda>
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x10a4>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c9c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fa92 f1a2 	rbit	r1, r2
 8001ca6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001caa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cae:	6011      	str	r1, [r2, #0]
  return result;
 8001cb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d182      	bne.n	8001bdc <HAL_RCC_OscConfig+0xf2c>
 8001cd6:	e037      	b.n	8001d48 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e02e      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x10a4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x10a4>)
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d00:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d117      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d18:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b09e      	sub	sp, #120	; 0x78
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e162      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	498b      	ldr	r1, [pc, #556]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e14a      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	497f      	ldr	r1, [pc, #508]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80dc 	beq.w	8001f84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d13c      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xf6>
 8001dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xa6>
 8001df8:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e00f      	b.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
 8001dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e10:	663b      	str	r3, [r7, #96]	; 0x60
 8001e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e22:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e26:	fa92 f2a2 	rbit	r2, r2
 8001e2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e2e:	fab2 f282 	clz	r2, r2
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f042 0220 	orr.w	r2, r2, #32
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f002 021f 	and.w	r2, r2, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d17b      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0f3      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d13c      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x178>
 8001e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x128>
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
 8001e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
 8001e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea8:	fa92 f2a2 	rbit	r2, r2
 8001eac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f002 021f 	and.w	r2, r2, #31
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d13a      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b2      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x1a0>
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e00d      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1bc>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2202      	movs	r2, #2
 8001f16:	61ba      	str	r2, [r7, #24]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	fa92 f2a2 	rbit	r2, r2
 8001f1e:	617a      	str	r2, [r7, #20]
  return result;
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e079      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	491a      	ldr	r1, [pc, #104]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fc02 	bl	800075c <HAL_GetTick>
 8001f58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe fbfe 	bl	800075c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e061      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d214      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e040      	b.n	8002036 <HAL_RCC_ClockConfig+0x2de>
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_ClockConfig+0x2e8>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	491a      	ldr	r1, [pc, #104]	; (8002040 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4912      	ldr	r1, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ffa:	f000 f829 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4601      	mov	r1, r0
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_RCC_ClockConfig+0x2e8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002008:	22f0      	movs	r2, #240	; 0xf0
 800200a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	60fa      	str	r2, [r7, #12]
  return result;
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	40d3      	lsrs	r3, r2
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x2ec>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	fa21 f303 	lsr.w	r3, r1, r3
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_RCC_ClockConfig+0x2f0>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_ClockConfig+0x2f4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa94 	bl	800055c <HAL_InitTick>
  
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3778      	adds	r7, #120	; 0x78
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	08005f48 	.word	0x08005f48
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 800207e:	e03f      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002082:	623b      	str	r3, [r7, #32]
      break;
 8002084:	e03f      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800208c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002090:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	fa92 f2a2 	rbit	r2, r2
 8002098:	607a      	str	r2, [r7, #4]
  return result;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	40d3      	lsrs	r3, r2
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	220f      	movs	r2, #15
 80020b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	60fa      	str	r2, [r7, #12]
  return result;
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e007      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	623b      	str	r3, [r7, #32]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002102:	623b      	str	r3, [r7, #32]
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	6a3b      	ldr	r3, [r7, #32]
}
 8002108:	4618      	mov	r0, r3
 800210a:	372c      	adds	r7, #44	; 0x2c
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	08005f60 	.word	0x08005f60
 8002120:	08005f70 	.word	0x08005f70

08002124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002142:	f7ff ffef 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002146:	4601      	mov	r1, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002150:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002154:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	603a      	str	r2, [r7, #0]
  return result;
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	40d3      	lsrs	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x40>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08005f58 	.word	0x08005f58

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002186:	f7ff ffcd 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002194:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	603a      	str	r2, [r7, #0]
  return result;
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08005f58 	.word	0x08005f58

080021c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	220f      	movs	r2, #15
 80021d2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_RCC_GetClockConfig+0x5c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_GetClockConfig+0x5c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_RCC_GetClockConfig+0x60>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0207 	and.w	r2, r3, #7
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b092      	sub	sp, #72	; 0x48
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80d4 	beq.w	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224c:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10e      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	61d3      	str	r3, [r2, #28]
 8002264:	4b48      	ldr	r3, [pc, #288]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b42      	ldr	r3, [pc, #264]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe fa65 	bl	800075c <HAL_GetTick>
 8002292:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fa61 	bl	800075c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1d6      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8084 	beq.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d07c      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	2301      	movs	r3, #1
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2300      	movs	r3, #0
 8002324:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d04b      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fa11 	bl	800075c <HAL_GetTick>
 800233a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fa0d 	bl	800075c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e180      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002354:	2302      	movs	r3, #2
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	61fb      	str	r3, [r7, #28]
  return result;
 800236c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d108      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002382:	4b01      	ldr	r3, [pc, #4]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	e00d      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	10908100 	.word	0x10908100
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	4b9a      	ldr	r3, [pc, #616]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2202      	movs	r2, #2
 80023a6:	613a      	str	r2, [r7, #16]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	60fa      	str	r2, [r7, #12]
  return result;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0b7      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	498c      	ldr	r1, [pc, #560]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f023 0203 	bic.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	497f      	ldr	r1, [pc, #508]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241e:	4b7b      	ldr	r3, [pc, #492]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4978      	ldr	r1, [pc, #480]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243c:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	4970      	ldr	r1, [pc, #448]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245a:	4b6c      	ldr	r3, [pc, #432]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f023 0210 	bic.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4969      	ldr	r1, [pc, #420]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002478:	4b64      	ldr	r3, [pc, #400]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	4961      	ldr	r1, [pc, #388]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f023 0220 	bic.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	495a      	ldr	r1, [pc, #360]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b4:	4b55      	ldr	r3, [pc, #340]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	4952      	ldr	r1, [pc, #328]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d2:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	494b      	ldr	r1, [pc, #300]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4943      	ldr	r1, [pc, #268]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	493c      	ldr	r1, [pc, #240]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800252c:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	492d      	ldr	r1, [pc, #180]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	4925      	ldr	r1, [pc, #148]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	491e      	ldr	r1, [pc, #120]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	490f      	ldr	r1, [pc, #60]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	4907      	ldr	r1, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025fe:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	e002      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	4913      	ldr	r1, [pc, #76]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002614:	4313      	orrs	r3, r2
 8002616:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	490b      	ldr	r1, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002632:	4313      	orrs	r3, r2
 8002634:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	4904      	ldr	r1, [pc, #16]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002650:	4313      	orrs	r3, r2
 8002652:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3748      	adds	r7, #72	; 0x48
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e049      	b.n	800270a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f841 	bl	8002712 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 f9f8 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d001      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04f      	b.n	80027e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_TIM_Base_Start_IT+0xc4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d018      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_Base_Start_IT+0xd8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d115      	bne.n	80027ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_TIM_Base_Start_IT+0xdc>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d015      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d011      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	e008      	b.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e000      	b.n	80027de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40013400 	.word	0x40013400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40015000 	.word	0x40015000
 8002804:	00010007 	.word	0x00010007

08002808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f905 	bl	8002a5a <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8f7 	bl	8002a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f908 	bl	8002a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0204 	mvn.w	r2, #4
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8db 	bl	8002a5a <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8cd 	bl	8002a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f8de 	bl	8002a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0208 	mvn.w	r2, #8
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8b1 	bl	8002a5a <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8a3 	bl	8002a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f8b4 	bl	8002a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b10      	cmp	r3, #16
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b10      	cmp	r3, #16
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0210 	mvn.w	r2, #16
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2208      	movs	r2, #8
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f887 	bl	8002a5a <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f879 	bl	8002a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f88a 	bl	8002a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0201 	mvn.w	r2, #1
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd fd66 	bl	8000458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f918 	bl	8002be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d10e      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b80      	cmp	r3, #128	; 0x80
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f90b 	bl	8002bfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d10e      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d107      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f838 	bl	8002a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d10e      	bne.n	8002a3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f06f 0220 	mvn.w	r2, #32
 8002a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8cb 	bl	8002bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <TIM_Base_SetConfig+0x11c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <TIM_Base_SetConfig+0x120>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <TIM_Base_SetConfig+0x124>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3d      	ldr	r2, [pc, #244]	; (8002bc0 <TIM_Base_SetConfig+0x128>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3c      	ldr	r2, [pc, #240]	; (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <TIM_Base_SetConfig+0x11c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d01b      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <TIM_Base_SetConfig+0x120>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d017      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <TIM_Base_SetConfig+0x124>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <TIM_Base_SetConfig+0x128>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <TIM_Base_SetConfig+0x130>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <TIM_Base_SetConfig+0x134>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <TIM_Base_SetConfig+0x138>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0x9a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <TIM_Base_SetConfig+0x11c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <TIM_Base_SetConfig+0x100>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <TIM_Base_SetConfig+0x128>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x100>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <TIM_Base_SetConfig+0x130>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x100>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <TIM_Base_SetConfig+0x134>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x100>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <TIM_Base_SetConfig+0x138>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x100>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40013400 	.word	0x40013400
 8002bc4:	40015000 	.word	0x40015000
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800

08002bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e040      	b.n	8002ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fc50 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2224      	movs	r2, #36	; 0x24
 8002c3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f82c 	bl	8002cac <UART_SetConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e022      	b.n	8002ca4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9f6 	bl	8003058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa7d 	bl	800319c <UART_CheckIdleState>
 8002ca2:	4603      	mov	r3, r0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <UART_SetConfig+0x274>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6979      	ldr	r1, [r7, #20]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a80      	ldr	r2, [pc, #512]	; (8002f24 <UART_SetConfig+0x278>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d120      	bne.n	8002d6a <UART_SetConfig+0xbe>
 8002d28:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <UART_SetConfig+0x27c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d817      	bhi.n	8002d64 <UART_SetConfig+0xb8>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <UART_SetConfig+0x90>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d59 	.word	0x08002d59
 8002d44:	08002d5f 	.word	0x08002d5f
 8002d48:	08002d53 	.word	0x08002d53
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e0b5      	b.n	8002ebe <UART_SetConfig+0x212>
 8002d52:	2302      	movs	r3, #2
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e0b2      	b.n	8002ebe <UART_SetConfig+0x212>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e0af      	b.n	8002ebe <UART_SetConfig+0x212>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e0ac      	b.n	8002ebe <UART_SetConfig+0x212>
 8002d64:	2310      	movs	r3, #16
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e0a9      	b.n	8002ebe <UART_SetConfig+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6f      	ldr	r2, [pc, #444]	; (8002f2c <UART_SetConfig+0x280>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d124      	bne.n	8002dbe <UART_SetConfig+0x112>
 8002d74:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <UART_SetConfig+0x27c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d80:	d011      	beq.n	8002da6 <UART_SetConfig+0xfa>
 8002d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d86:	d817      	bhi.n	8002db8 <UART_SetConfig+0x10c>
 8002d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d8c:	d011      	beq.n	8002db2 <UART_SetConfig+0x106>
 8002d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d92:	d811      	bhi.n	8002db8 <UART_SetConfig+0x10c>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <UART_SetConfig+0xf4>
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d006      	beq.n	8002dac <UART_SetConfig+0x100>
 8002d9e:	e00b      	b.n	8002db8 <UART_SetConfig+0x10c>
 8002da0:	2300      	movs	r3, #0
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e08b      	b.n	8002ebe <UART_SetConfig+0x212>
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e088      	b.n	8002ebe <UART_SetConfig+0x212>
 8002dac:	2304      	movs	r3, #4
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e085      	b.n	8002ebe <UART_SetConfig+0x212>
 8002db2:	2308      	movs	r3, #8
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e082      	b.n	8002ebe <UART_SetConfig+0x212>
 8002db8:	2310      	movs	r3, #16
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e07f      	b.n	8002ebe <UART_SetConfig+0x212>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <UART_SetConfig+0x284>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d124      	bne.n	8002e12 <UART_SetConfig+0x166>
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <UART_SetConfig+0x27c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dd4:	d011      	beq.n	8002dfa <UART_SetConfig+0x14e>
 8002dd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dda:	d817      	bhi.n	8002e0c <UART_SetConfig+0x160>
 8002ddc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de0:	d011      	beq.n	8002e06 <UART_SetConfig+0x15a>
 8002de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de6:	d811      	bhi.n	8002e0c <UART_SetConfig+0x160>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <UART_SetConfig+0x148>
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df0:	d006      	beq.n	8002e00 <UART_SetConfig+0x154>
 8002df2:	e00b      	b.n	8002e0c <UART_SetConfig+0x160>
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e061      	b.n	8002ebe <UART_SetConfig+0x212>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e05e      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e00:	2304      	movs	r3, #4
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e05b      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e06:	2308      	movs	r3, #8
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	e058      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e055      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <UART_SetConfig+0x288>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d124      	bne.n	8002e66 <UART_SetConfig+0x1ba>
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <UART_SetConfig+0x27c>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e28:	d011      	beq.n	8002e4e <UART_SetConfig+0x1a2>
 8002e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e2e:	d817      	bhi.n	8002e60 <UART_SetConfig+0x1b4>
 8002e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e34:	d011      	beq.n	8002e5a <UART_SetConfig+0x1ae>
 8002e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3a:	d811      	bhi.n	8002e60 <UART_SetConfig+0x1b4>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <UART_SetConfig+0x19c>
 8002e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e44:	d006      	beq.n	8002e54 <UART_SetConfig+0x1a8>
 8002e46:	e00b      	b.n	8002e60 <UART_SetConfig+0x1b4>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e037      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e034      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e54:	2304      	movs	r3, #4
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e031      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e02e      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e60:	2310      	movs	r3, #16
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e02b      	b.n	8002ebe <UART_SetConfig+0x212>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <UART_SetConfig+0x28c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d124      	bne.n	8002eba <UART_SetConfig+0x20e>
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <UART_SetConfig+0x27c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e7c:	d011      	beq.n	8002ea2 <UART_SetConfig+0x1f6>
 8002e7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e82:	d817      	bhi.n	8002eb4 <UART_SetConfig+0x208>
 8002e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e88:	d011      	beq.n	8002eae <UART_SetConfig+0x202>
 8002e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8e:	d811      	bhi.n	8002eb4 <UART_SetConfig+0x208>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <UART_SetConfig+0x1f0>
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d006      	beq.n	8002ea8 <UART_SetConfig+0x1fc>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x208>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x212>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e00a      	b.n	8002ebe <UART_SetConfig+0x212>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e007      	b.n	8002ebe <UART_SetConfig+0x212>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e004      	b.n	8002ebe <UART_SetConfig+0x212>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e001      	b.n	8002ebe <UART_SetConfig+0x212>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d16c      	bne.n	8002fa2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d838      	bhi.n	8002f40 <UART_SetConfig+0x294>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0x228>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f41 	.word	0x08002f41
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	08002f41 	.word	0x08002f41
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f17 	.word	0x08002f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7ff f920 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002efc:	61b8      	str	r0, [r7, #24]
        break;
 8002efe:	e024      	b.n	8002f4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff f93e 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8002f04:	61b8      	str	r0, [r7, #24]
        break;
 8002f06:	e020      	b.n	8002f4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <UART_SetConfig+0x290>)
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e01d      	b.n	8002f4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7ff f89f 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002f12:	61b8      	str	r0, [r7, #24]
        break;
 8002f14:	e019      	b.n	8002f4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e015      	b.n	8002f4a <UART_SetConfig+0x29e>
 8002f1e:	bf00      	nop
 8002f20:	efff69f3 	.word	0xefff69f3
 8002f24:	40013800 	.word	0x40013800
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	40004800 	.word	0x40004800
 8002f34:	40004c00 	.word	0x40004c00
 8002f38:	40005000 	.word	0x40005000
 8002f3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	77bb      	strb	r3, [r7, #30]
        break;
 8002f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d075      	beq.n	800303c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	005a      	lsls	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d916      	bls.n	8002f9c <UART_SetConfig+0x2f0>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d212      	bcs.n	8002f9c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f023 030f 	bic.w	r3, r3, #15
 8002f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	e04f      	b.n	800303c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	77bb      	strb	r3, [r7, #30]
 8002fa0:	e04c      	b.n	800303c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d828      	bhi.n	8002ffa <UART_SetConfig+0x34e>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x304>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002ffb 	.word	0x08002ffb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002ffb 	.word	0x08002ffb
 8002fc8:	08002ffb 	.word	0x08002ffb
 8002fcc:	08002ffb 	.word	0x08002ffb
 8002fd0:	08002ff3 	.word	0x08002ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff f8b2 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002fd8:	61b8      	str	r0, [r7, #24]
        break;
 8002fda:	e013      	b.n	8003004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7ff f8d0 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8002fe0:	61b8      	str	r0, [r7, #24]
        break;
 8002fe2:	e00f      	b.n	8003004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <UART_SetConfig+0x3a8>)
 8002fe6:	61bb      	str	r3, [r7, #24]
        break;
 8002fe8:	e00c      	b.n	8003004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fea:	f7ff f831 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002fee:	61b8      	str	r0, [r7, #24]
        break;
 8002ff0:	e008      	b.n	8003004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	61bb      	str	r3, [r7, #24]
        break;
 8002ff8:	e004      	b.n	8003004 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77bb      	strb	r3, [r7, #30]
        break;
 8003002:	bf00      	nop
    }

    if (pclk != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	085a      	lsrs	r2, r3, #1
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	d908      	bls.n	8003038 <UART_SetConfig+0x38c>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d204      	bcs.n	8003038 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e001      	b.n	800303c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003048:	7fbb      	ldrb	r3, [r7, #30]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	007a1200 	.word	0x007a1200

08003058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01a      	beq.n	800316e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003156:	d10a      	bne.n	800316e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031ac:	f7fd fad6 	bl	800075c <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d10e      	bne.n	80031de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f82d 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e023      	b.n	8003226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d10e      	bne.n	800320a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f817 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00d      	b.n	8003226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b09c      	sub	sp, #112	; 0x70
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323e:	e0a5      	b.n	800338c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	f000 80a1 	beq.w	800338c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fd fa87 	bl	800075c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <UART_WaitOnFlagUntilTimeout+0x32>
 800325a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13e      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003274:	667b      	str	r3, [r7, #100]	; 0x64
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003280:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e6      	bne.n	8003260 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3308      	adds	r3, #8
 8003298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3308      	adds	r3, #8
 80032b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e067      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04f      	beq.n	800338c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fa:	d147      	bne.n	800338c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003304:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800331a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
 8003326:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800332a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e6      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3308      	adds	r3, #8
 800333e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	613b      	str	r3, [r7, #16]
   return(result);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3308      	adds	r3, #8
 8003356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003358:	623a      	str	r2, [r7, #32]
 800335a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	61bb      	str	r3, [r7, #24]
   return(result);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e010      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	f43f af4a 	beq.w	8003240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3770      	adds	r7, #112	; 0x70
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033be:	f3ef 8305 	mrs	r3, IPSR
 80033c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	607b      	str	r3, [r7, #4]
  return(result);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <osKernelInitialize+0x32>
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <osKernelInitialize+0x64>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d109      	bne.n	80033f2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033de:	f3ef 8311 	mrs	r3, BASEPRI
 80033e2:	603b      	str	r3, [r7, #0]
  return(result);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033ea:	f06f 0305 	mvn.w	r3, #5
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e00c      	b.n	800340c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <osKernelInitialize+0x64>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <osKernelInitialize+0x64>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e002      	b.n	800340c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800340c:	68fb      	ldr	r3, [r7, #12]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000108 	.word	0x20000108

08003420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003426:	f3ef 8305 	mrs	r3, IPSR
 800342a:	60bb      	str	r3, [r7, #8]
  return(result);
 800342c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003432:	f3ef 8310 	mrs	r3, PRIMASK
 8003436:	607b      	str	r3, [r7, #4]
  return(result);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <osKernelStart+0x32>
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <osKernelStart+0x64>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d109      	bne.n	800345a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003446:	f3ef 8311 	mrs	r3, BASEPRI
 800344a:	603b      	str	r3, [r7, #0]
  return(result);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003452:	f06f 0305 	mvn.w	r3, #5
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e00e      	b.n	8003478 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <osKernelStart+0x64>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <osKernelStart+0x64>)
 8003464:	2202      	movs	r2, #2
 8003466:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003468:	f001 f880 	bl	800456c <vTaskStartScheduler>
      stat = osOK;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000108 	.word	0x20000108

08003488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b092      	sub	sp, #72	; 0x48
 800348c:	af04      	add	r7, sp, #16
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003498:	f3ef 8305 	mrs	r3, IPSR
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8094 	bne.w	80035ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	623b      	str	r3, [r7, #32]
  return(result);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 808d 	bne.w	80035ce <osThreadNew+0x146>
 80034b4:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <osThreadNew+0x150>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d106      	bne.n	80034ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034bc:	f3ef 8311 	mrs	r3, BASEPRI
 80034c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 8082 	bne.w	80035ce <osThreadNew+0x146>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d07e      	beq.n	80035ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80034d4:	2318      	movs	r3, #24
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80034d8:	2300      	movs	r3, #0
 80034da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80034dc:	f107 031b 	add.w	r3, r7, #27
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d045      	beq.n	800357a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <osThreadNew+0x74>
        name = attr->name;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <osThreadNew+0x9a>
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b38      	cmp	r3, #56	; 0x38
 8003514:	d805      	bhi.n	8003522 <osThreadNew+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <osThreadNew+0x9e>
        return (NULL);
 8003522:	2300      	movs	r3, #0
 8003524:	e054      	b.n	80035d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <osThreadNew+0xd4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b5b      	cmp	r3, #91	; 0x5b
 8003544:	d90a      	bls.n	800355c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <osThreadNew+0xd4>
        mem = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
 800355a:	e010      	b.n	800357e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <osThreadNew+0xf6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d108      	bne.n	800357e <osThreadNew+0xf6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <osThreadNew+0xf6>
          mem = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
 8003578:	e001      	b.n	800357e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	2b01      	cmp	r3, #1
 8003582:	d110      	bne.n	80035a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800358c:	9202      	str	r2, [sp, #8]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fe1a 	bl	80041d4 <xTaskCreateStatic>
 80035a0:	4603      	mov	r3, r0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e013      	b.n	80035ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d110      	bne.n	80035ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fe64 	bl	800428c <xTaskCreate>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <osThreadNew+0x146>
          hTask = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035ce:	697b      	ldr	r3, [r7, #20]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3738      	adds	r7, #56	; 0x38
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000108 	.word	0x20000108

080035dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e4:	f3ef 8305 	mrs	r3, IPSR
 80035e8:	613b      	str	r3, [r7, #16]
  return(result);
 80035ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10f      	bne.n	8003610 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <osDelay+0x34>
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <osDelay+0x58>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d109      	bne.n	8003618 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003604:	f3ef 8311 	mrs	r3, BASEPRI
 8003608:	60bb      	str	r3, [r7, #8]
  return(result);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <osDelay+0x3c>
    stat = osErrorISR;
 8003610:	f06f 0305 	mvn.w	r3, #5
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e007      	b.n	8003628 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff6e 	bl	8004504 <vTaskDelay>
    }
  }

  return (stat);
 8003628:	697b      	ldr	r3, [r7, #20]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000108 	.word	0x20000108

08003638 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <vApplicationGetIdleTaskMemory+0x2c>)
 8003648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a06      	ldr	r2, [pc, #24]	; (8003668 <vApplicationGetIdleTaskMemory+0x30>)
 800364e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000010c 	.word	0x2000010c
 8003668:	20000168 	.word	0x20000168

0800366c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <vApplicationGetTimerTaskMemory+0x2c>)
 800367c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <vApplicationGetTimerTaskMemory+0x30>)
 8003682:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000368 	.word	0x20000368
 800369c:	200003c4 	.word	0x200003c4

080036a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295
 80036b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f103 0208 	add.w	r2, r3, #8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0208 	add.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d103      	bne.n	8003762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e00c      	b.n	800377c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3308      	adds	r3, #8
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e002      	b.n	8003770 <vListInsert+0x2e>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d2f6      	bcs.n	800376a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d103      	bne.n	80037e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003832:	f002 f80f 	bl	8005854 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	3b01      	subs	r3, #1
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22ff      	movs	r2, #255	; 0xff
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d114      	bne.n	80038b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01a      	beq.n	80038c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3310      	adds	r3, #16
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f8f7 	bl	8004a88 <xTaskRemoveFromEventList>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <xQueueGenericReset+0xcc>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	e009      	b.n	80038c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3310      	adds	r3, #16
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fef2 	bl	80036a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3324      	adds	r3, #36	; 0x24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff feed 	bl	80036a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038c6:	f001 fff5 	bl	80058b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <xQueueGenericCreateStatic+0x52>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <xQueueGenericCreateStatic+0x56>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericCreateStatic+0x58>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	623b      	str	r3, [r7, #32]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <xQueueGenericCreateStatic+0x7e>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <xQueueGenericCreateStatic+0x82>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericCreateStatic+0x84>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	61fb      	str	r3, [r7, #28]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003976:	2350      	movs	r3, #80	; 0x50
 8003978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d00a      	beq.n	8003996 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61bb      	str	r3, [r7, #24]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f805 	bl	80039c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039be:	4618      	mov	r0, r3
 80039c0:	3730      	adds	r7, #48	; 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e002      	b.n	80039e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039f4:	2101      	movs	r1, #1
 80039f6:	69b8      	ldr	r0, [r7, #24]
 80039f8:	f7ff ff06 	bl	8003808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericSend+0x32>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <xQueueGenericSend+0x40>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <xQueueGenericSend+0x44>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <xQueueGenericSend+0x46>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <xQueueGenericSend+0x60>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d103      	bne.n	8003a7a <xQueueGenericSend+0x6e>
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <xQueueGenericSend+0x72>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueGenericSend+0x74>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	623b      	str	r3, [r7, #32]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a9a:	f001 f9b9 	bl	8004e10 <xTaskGetSchedulerState>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <xQueueGenericSend+0x9e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSend+0xa2>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericSend+0xa4>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xQueueGenericSend+0xbe>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	61fb      	str	r3, [r7, #28]
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003aca:	f001 fec3 	bl	8005854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <xQueueGenericSend+0xd4>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d129      	bne.n	8003b34 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae6:	f000 fa07 	bl	8003ef8 <prvCopyDataToQueue>
 8003aea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d010      	beq.n	8003b16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	3324      	adds	r3, #36	; 0x24
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ffc5 	bl	8004a88 <xTaskRemoveFromEventList>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b04:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <xQueueGenericSend+0x1f8>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	e00a      	b.n	8003b2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <xQueueGenericSend+0x1f8>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b2c:	f001 fec2 	bl	80058b4 <vPortExitCritical>
				return pdPASS;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e063      	b.n	8003bfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b3a:	f001 febb 	bl	80058b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e05c      	b.n	8003bfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 ffff 	bl	8004b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b56:	f001 fead 	bl	80058b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b5a:	f000 fd6d 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b5e:	f001 fe79 	bl	8005854 <vPortEnterCritical>
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b68:	b25b      	sxtb	r3, r3
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d103      	bne.n	8003b78 <xQueueGenericSend+0x16c>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d103      	bne.n	8003b8e <xQueueGenericSend+0x182>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b8e:	f001 fe91 	bl	80058b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b92:	1d3a      	adds	r2, r7, #4
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 ffee 	bl	8004b7c <xTaskCheckForTimeOut>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d124      	bne.n	8003bf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba8:	f000 fa9e 	bl	80040e8 <prvIsQueueFull>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 ff14 	bl	80049e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc2:	f000 fa29 	bl	8004018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bc6:	f000 fd45 	bl	8004654 <xTaskResumeAll>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f af7c 	bne.w	8003aca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <xQueueGenericSend+0x1f8>)
 8003bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	e772      	b.n	8003aca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be6:	f000 fa17 	bl	8004018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bea:	f000 fd33 	bl	8004654 <xTaskResumeAll>
 8003bee:	e76c      	b.n	8003aca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf2:	f000 fa11 	bl	8004018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bf6:	f000 fd2d 	bl	8004654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bfa:	2300      	movs	r3, #0
		}
	}
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3738      	adds	r7, #56	; 0x38
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08e      	sub	sp, #56	; 0x38
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <xQueueGenericSendFromISR+0x3c>
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <xQueueGenericSendFromISR+0x40>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <xQueueGenericSendFromISR+0x42>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	623b      	str	r3, [r7, #32]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d103      	bne.n	8003c72 <xQueueGenericSendFromISR+0x6a>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <xQueueGenericSendFromISR+0x6e>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericSendFromISR+0x70>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61fb      	str	r3, [r7, #28]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c92:	f001 fec1 	bl	8005a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c96:	f3ef 8211 	mrs	r2, BASEPRI
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	61ba      	str	r2, [r7, #24]
 8003cac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <xQueueGenericSendFromISR+0xbc>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d12c      	bne.n	8003d1e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd4:	f000 f910 	bl	8003ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d112      	bne.n	8003d08 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 feca 	bl	8004a88 <xTaskRemoveFromEventList>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00e      	beq.n	8003d18 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e007      	b.n	8003d18 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d1c:	e001      	b.n	8003d22 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3738      	adds	r7, #56	; 0x38
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <xQueueReceive+0x30>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	623b      	str	r3, [r7, #32]
}
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <xQueueReceive+0x3e>
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <xQueueReceive+0x42>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueReceive+0x44>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xQueueReceive+0x5e>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	61fb      	str	r3, [r7, #28]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d96:	f001 f83b 	bl	8004e10 <xTaskGetSchedulerState>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <xQueueReceive+0x6e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueReceive+0x72>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueReceive+0x74>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueReceive+0x8e>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	61bb      	str	r3, [r7, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dc6:	f001 fd45 	bl	8005854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01f      	beq.n	8003e16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dda:	f000 f8f7 	bl	8003fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00f      	beq.n	8003e0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	3310      	adds	r3, #16
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fe48 	bl	8004a88 <xTaskRemoveFromEventList>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <xQueueReceive+0x1bc>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e0e:	f001 fd51 	bl	80058b4 <vPortExitCritical>
				return pdPASS;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e069      	b.n	8003eea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e1c:	f001 fd4a 	bl	80058b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e062      	b.n	8003eea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fe8e 	bl	8004b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e38:	f001 fd3c 	bl	80058b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e3c:	f000 fbfc 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e40:	f001 fd08 	bl	8005854 <vPortEnterCritical>
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d103      	bne.n	8003e5a <xQueueReceive+0x122>
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d103      	bne.n	8003e70 <xQueueReceive+0x138>
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e70:	f001 fd20 	bl	80058b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e74:	1d3a      	adds	r2, r7, #4
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe7d 	bl	8004b7c <xTaskCheckForTimeOut>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d123      	bne.n	8003ed0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8a:	f000 f917 	bl	80040bc <prvIsQueueEmpty>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fda3 	bl	80049e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea4:	f000 f8b8 	bl	8004018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ea8:	f000 fbd4 	bl	8004654 <xTaskResumeAll>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d189      	bne.n	8003dc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xQueueReceive+0x1bc>)
 8003eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	e780      	b.n	8003dc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec6:	f000 f8a7 	bl	8004018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eca:	f000 fbc3 	bl	8004654 <xTaskResumeAll>
 8003ece:	e77a      	b.n	8003dc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed2:	f000 f8a1 	bl	8004018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ed6:	f000 fbbd 	bl	8004654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003edc:	f000 f8ee 	bl	80040bc <prvIsQueueEmpty>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f43f af6f 	beq.w	8003dc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d14d      	bne.n	8003fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ff92 	bl	8004e4c <xTaskPriorityDisinherit>
 8003f28:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	e043      	b.n	8003fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d119      	bne.n	8003f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6898      	ldr	r0, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	f001 ffa6 	bl	8005e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d32b      	bcc.n	8003fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	e026      	b.n	8003fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68d8      	ldr	r0, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	461a      	mov	r2, r3
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	f001 ff8c 	bl	8005e94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	425b      	negs	r3, r3
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d207      	bcs.n	8003fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d105      	bne.n	8003fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	441a      	add	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d303      	bcc.n	8004000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68d9      	ldr	r1, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	461a      	mov	r2, r3
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f001 ff42 	bl	8005e94 <memcpy>
	}
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004020:	f001 fc18 	bl	8005854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800402a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800402c:	e011      	b.n	8004052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3324      	adds	r3, #36	; 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd24 	bl	8004a88 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004046:	f000 fdfb 	bl	8004c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3b01      	subs	r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dce9      	bgt.n	800402e <prvUnlockQueue+0x16>
 800405a:	e000      	b.n	800405e <prvUnlockQueue+0x46>
					break;
 800405c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004066:	f001 fc25 	bl	80058b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800406a:	f001 fbf3 	bl	8005854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004076:	e011      	b.n	800409c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3310      	adds	r3, #16
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fcff 	bl	8004a88 <xTaskRemoveFromEventList>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004090:	f000 fdd6 	bl	8004c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	3b01      	subs	r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800409c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	dce9      	bgt.n	8004078 <prvUnlockQueue+0x60>
 80040a4:	e000      	b.n	80040a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040b0:	f001 fc00 	bl	80058b4 <vPortExitCritical>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040c4:	f001 fbc6 	bl	8005854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e001      	b.n	80040da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040da:	f001 fbeb 	bl	80058b4 <vPortExitCritical>

	return xReturn;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f0:	f001 fbb0 	bl	8005854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d102      	bne.n	8004106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e001      	b.n	800410a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800410a:	f001 fbd3 	bl	80058b4 <vPortExitCritical>

	return xReturn;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e014      	b.n	8004152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <vQueueAddToRegistry+0x50>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <vQueueAddToRegistry+0x50>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <vQueueAddToRegistry+0x50>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800414a:	e006      	b.n	800415a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b07      	cmp	r3, #7
 8004156:	d9e7      	bls.n	8004128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200007c4 	.word	0x200007c4

0800416c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800417c:	f001 fb6a 	bl	8005854 <vPortEnterCritical>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004186:	b25b      	sxtb	r3, r3
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d103      	bne.n	8004196 <vQueueWaitForMessageRestricted+0x2a>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <vQueueWaitForMessageRestricted+0x40>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	f001 fb82 	bl	80058b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3324      	adds	r3, #36	; 0x24
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fc35 	bl	8004a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff ff26 	bl	8004018 <prvUnlockQueue>
	}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af04      	add	r7, sp, #16
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	623b      	str	r3, [r7, #32]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xTaskCreateStatic+0x46>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	61fb      	str	r3, [r7, #28]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800421a:	235c      	movs	r3, #92	; 0x5c
 800421c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b5c      	cmp	r3, #92	; 0x5c
 8004222:	d00a      	beq.n	800423a <xTaskCreateStatic+0x66>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61bb      	str	r3, [r7, #24]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01e      	beq.n	800427e <xTaskCreateStatic+0xaa>
 8004240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01b      	beq.n	800427e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004258:	2300      	movs	r3, #0
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f850 	bl	8004316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004278:	f000 f8d4 	bl	8004424 <prvAddNewTaskToReadyList>
 800427c:	e001      	b.n	8004282 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004282:	697b      	ldr	r3, [r7, #20]
	}
 8004284:	4618      	mov	r0, r3
 8004286:	3728      	adds	r7, #40	; 0x28
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	; 0x30
 8004290:	af04      	add	r7, sp, #16
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fbf9 	bl	8005a98 <pvPortMalloc>
 80042a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80042ae:	205c      	movs	r0, #92	; 0x5c
 80042b0:	f001 fbf2 	bl	8005a98 <pvPortMalloc>
 80042b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
 80042c2:	e005      	b.n	80042d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f001 fcab 	bl	8005c20 <vPortFree>
 80042ca:	e001      	b.n	80042d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	2300      	movs	r3, #0
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	9302      	str	r3, [sp, #8]
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f80e 	bl	8004316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042fa:	69f8      	ldr	r0, [r7, #28]
 80042fc:	f000 f892 	bl	8004424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004300:	2301      	movs	r3, #1
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e002      	b.n	800430c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
 800430a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800430c:	69bb      	ldr	r3, [r7, #24]
	}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b088      	sub	sp, #32
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	461a      	mov	r2, r3
 800432e:	21a5      	movs	r1, #165	; 0xa5
 8004330:	f001 fdbe 	bl	8005eb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800433e:	3b01      	subs	r3, #1
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f023 0307 	bic.w	r3, r3, #7
 800434c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	617b      	str	r3, [r7, #20]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e012      	b.n	800439a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	7819      	ldrb	r1, [r3, #0]
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	3334      	adds	r3, #52	; 0x34
 8004384:	460a      	mov	r2, r1
 8004386:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d9e9      	bls.n	8004374 <prvInitialiseNewTask+0x5e>
 80043a0:	e000      	b.n	80043a4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80043a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b37      	cmp	r3, #55	; 0x37
 80043b0:	d901      	bls.n	80043b6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043b2:	2337      	movs	r3, #55	; 0x37
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	2200      	movs	r2, #0
 80043c6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f987 	bl	80036e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	3318      	adds	r3, #24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f982 	bl	80036e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2200      	movs	r2, #0
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	69b8      	ldr	r0, [r7, #24]
 8004406:	f001 f8f5 	bl	80055f4 <pxPortInitialiseStack>
 800440a:	4602      	mov	r2, r0
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441c:	bf00      	nop
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800442c:	f001 fa12 	bl	8005854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004430:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <prvAddNewTaskToReadyList+0xc4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <prvAddNewTaskToReadyList+0xc4>)
 8004438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <prvAddNewTaskToReadyList+0xc8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <prvAddNewTaskToReadyList+0xc8>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <prvAddNewTaskToReadyList+0xc4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d110      	bne.n	8004472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004450:	f000 fc1a 	bl	8004c88 <prvInitialiseTaskLists>
 8004454:	e00d      	b.n	8004472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <prvAddNewTaskToReadyList+0xcc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <prvAddNewTaskToReadyList+0xc8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	429a      	cmp	r2, r3
 800446a:	d802      	bhi.n	8004472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <prvAddNewTaskToReadyList+0xc8>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <prvAddNewTaskToReadyList+0xd0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <prvAddNewTaskToReadyList+0xd0>)
 800447a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <prvAddNewTaskToReadyList+0xd0>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <prvAddNewTaskToReadyList+0xd4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d903      	bls.n	8004498 <prvAddNewTaskToReadyList+0x74>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <prvAddNewTaskToReadyList+0xd4>)
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <prvAddNewTaskToReadyList+0xd8>)
 80044a6:	441a      	add	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7ff f923 	bl	80036fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044b4:	f001 f9fe 	bl	80058b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <prvAddNewTaskToReadyList+0xcc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvAddNewTaskToReadyList+0xc8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d207      	bcs.n	80044de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <prvAddNewTaskToReadyList+0xdc>)
 80044d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000cd8 	.word	0x20000cd8
 80044ec:	20000804 	.word	0x20000804
 80044f0:	20000ce4 	.word	0x20000ce4
 80044f4:	20000cf4 	.word	0x20000cf4
 80044f8:	20000ce0 	.word	0x20000ce0
 80044fc:	20000808 	.word	0x20000808
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d017      	beq.n	8004546 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <vTaskDelay+0x60>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <vTaskDelay+0x30>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	60bb      	str	r3, [r7, #8]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004534:	f000 f880 	bl	8004638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004538:	2100      	movs	r1, #0
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fcf4 	bl	8004f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004540:	f000 f888 	bl	8004654 <xTaskResumeAll>
 8004544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <vTaskDelay+0x64>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000d00 	.word	0x20000d00
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457a:	463a      	mov	r2, r7
 800457c:	1d39      	adds	r1, r7, #4
 800457e:	f107 0308 	add.w	r3, r7, #8
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f858 	bl	8003638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	9202      	str	r2, [sp, #8]
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	2300      	movs	r3, #0
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	460a      	mov	r2, r1
 800459a:	4921      	ldr	r1, [pc, #132]	; (8004620 <vTaskStartScheduler+0xb4>)
 800459c:	4821      	ldr	r0, [pc, #132]	; (8004624 <vTaskStartScheduler+0xb8>)
 800459e:	f7ff fe19 	bl	80041d4 <xTaskCreateStatic>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <vTaskStartScheduler+0xbc>)
 80045a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045a8:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <vTaskStartScheduler+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e001      	b.n	80045ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045c0:	f000 fd06 	bl	8004fd0 <xTimerCreateTimerTask>
 80045c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d116      	bne.n	80045fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	613b      	str	r3, [r7, #16]
}
 80045de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <vTaskStartScheduler+0xc0>)
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <vTaskStartScheduler+0xc4>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <vTaskStartScheduler+0xc8>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045f4:	f001 f88c 	bl	8005710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045f8:	e00e      	b.n	8004618 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d10a      	bne.n	8004618 <vTaskStartScheduler+0xac>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60fb      	str	r3, [r7, #12]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vTaskStartScheduler+0xaa>
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	08005ee8 	.word	0x08005ee8
 8004624:	08004c59 	.word	0x08004c59
 8004628:	20000cfc 	.word	0x20000cfc
 800462c:	20000cf8 	.word	0x20000cf8
 8004630:	20000ce4 	.word	0x20000ce4
 8004634:	20000cdc 	.word	0x20000cdc

08004638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vTaskSuspendAll+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <vTaskSuspendAll+0x18>)
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000d00 	.word	0x20000d00

08004654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004662:	4b42      	ldr	r3, [pc, #264]	; (800476c <xTaskResumeAll+0x118>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <xTaskResumeAll+0x2c>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004680:	f001 f8e8 	bl	8005854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004684:	4b39      	ldr	r3, [pc, #228]	; (800476c <xTaskResumeAll+0x118>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3b01      	subs	r3, #1
 800468a:	4a38      	ldr	r2, [pc, #224]	; (800476c <xTaskResumeAll+0x118>)
 800468c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <xTaskResumeAll+0x118>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d162      	bne.n	800475c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <xTaskResumeAll+0x11c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d05e      	beq.n	800475c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800469e:	e02f      	b.n	8004700 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <xTaskResumeAll+0x120>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3318      	adds	r3, #24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f881 	bl	80037b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff f87c 	bl	80037b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <xTaskResumeAll+0x124>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d903      	bls.n	80046d0 <xTaskResumeAll+0x7c>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <xTaskResumeAll+0x124>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <xTaskResumeAll+0x128>)
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7ff f807 	bl	80036fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <xTaskResumeAll+0x12c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <xTaskResumeAll+0x130>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <xTaskResumeAll+0x120>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1cb      	bne.n	80046a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470e:	f000 fb59 	bl	8004dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <xTaskResumeAll+0x134>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471e:	f000 f847 	bl	80047b0 <xTaskIncrementTick>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <xTaskResumeAll+0x130>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3b01      	subs	r3, #1
 8004732:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f1      	bne.n	800471e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <xTaskResumeAll+0x134>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <xTaskResumeAll+0x130>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <xTaskResumeAll+0x138>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800475c:	f001 f8aa 	bl	80058b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004760:	68bb      	ldr	r3, [r7, #8]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000d00 	.word	0x20000d00
 8004770:	20000cd8 	.word	0x20000cd8
 8004774:	20000c98 	.word	0x20000c98
 8004778:	20000ce0 	.word	0x20000ce0
 800477c:	20000808 	.word	0x20000808
 8004780:	20000804 	.word	0x20000804
 8004784:	20000cec 	.word	0x20000cec
 8004788:	20000ce8 	.word	0x20000ce8
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <xTaskGetTickCount+0x1c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800479c:	687b      	ldr	r3, [r7, #4]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000cdc 	.word	0x20000cdc

080047b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <xTaskIncrementTick+0x150>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 808e 	bne.w	80048e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047c4:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <xTaskIncrementTick+0x154>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047cc:	4a4d      	ldr	r2, [pc, #308]	; (8004904 <xTaskIncrementTick+0x154>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d120      	bne.n	800481a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047d8:	4b4b      	ldr	r3, [pc, #300]	; (8004908 <xTaskIncrementTick+0x158>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	603b      	str	r3, [r7, #0]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xTaskIncrementTick+0x46>
 80047f8:	4b43      	ldr	r3, [pc, #268]	; (8004908 <xTaskIncrementTick+0x158>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <xTaskIncrementTick+0x15c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a41      	ldr	r2, [pc, #260]	; (8004908 <xTaskIncrementTick+0x158>)
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4a41      	ldr	r2, [pc, #260]	; (800490c <xTaskIncrementTick+0x15c>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <xTaskIncrementTick+0x160>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <xTaskIncrementTick+0x160>)
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	f000 fad5 	bl	8004dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <xTaskIncrementTick+0x164>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d34e      	bcc.n	80048c2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004824:	4b38      	ldr	r3, [pc, #224]	; (8004908 <xTaskIncrementTick+0x158>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xTaskIncrementTick+0x82>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xTaskIncrementTick+0x84>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004838:	4b36      	ldr	r3, [pc, #216]	; (8004914 <xTaskIncrementTick+0x164>)
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	601a      	str	r2, [r3, #0]
					break;
 8004840:	e03f      	b.n	80048c2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <xTaskIncrementTick+0x158>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d203      	bcs.n	8004862 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800485a:	4a2e      	ldr	r2, [pc, #184]	; (8004914 <xTaskIncrementTick+0x164>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6013      	str	r3, [r2, #0]
						break;
 8004860:	e02f      	b.n	80048c2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	3304      	adds	r3, #4
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe ffa4 	bl	80037b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3318      	adds	r3, #24
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe ff9b 	bl	80037b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	4b25      	ldr	r3, [pc, #148]	; (8004918 <xTaskIncrementTick+0x168>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d903      	bls.n	8004892 <xTaskIncrementTick+0xe2>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a22      	ldr	r2, [pc, #136]	; (8004918 <xTaskIncrementTick+0x168>)
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <xTaskIncrementTick+0x16c>)
 80048a0:	441a      	add	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe ff26 	bl	80036fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <xTaskIncrementTick+0x170>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d3b3      	bcc.n	8004824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c0:	e7b0      	b.n	8004824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <xTaskIncrementTick+0x170>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4914      	ldr	r1, [pc, #80]	; (800491c <xTaskIncrementTick+0x16c>)
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d907      	bls.n	80048ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e004      	b.n	80048ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <xTaskIncrementTick+0x174>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <xTaskIncrementTick+0x174>)
 80048e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <xTaskIncrementTick+0x178>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000d00 	.word	0x20000d00
 8004904:	20000cdc 	.word	0x20000cdc
 8004908:	20000c90 	.word	0x20000c90
 800490c:	20000c94 	.word	0x20000c94
 8004910:	20000cf0 	.word	0x20000cf0
 8004914:	20000cf8 	.word	0x20000cf8
 8004918:	20000ce0 	.word	0x20000ce0
 800491c:	20000808 	.word	0x20000808
 8004920:	20000804 	.word	0x20000804
 8004924:	20000ce8 	.word	0x20000ce8
 8004928:	20000cec 	.word	0x20000cec

0800492c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <vTaskSwitchContext+0xa8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <vTaskSwitchContext+0xac>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004940:	e041      	b.n	80049c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <vTaskSwitchContext+0xac>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <vTaskSwitchContext+0xb0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e010      	b.n	8004972 <vTaskSwitchContext+0x46>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <vTaskSwitchContext+0x40>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	607b      	str	r3, [r7, #4]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <vTaskSwitchContext+0x3e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	491b      	ldr	r1, [pc, #108]	; (80049e0 <vTaskSwitchContext+0xb4>)
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0e4      	beq.n	8004950 <vTaskSwitchContext+0x24>
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <vTaskSwitchContext+0xb4>)
 8004992:	4413      	add	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3308      	adds	r3, #8
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d104      	bne.n	80049b6 <vTaskSwitchContext+0x8a>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <vTaskSwitchContext+0xb8>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	4a06      	ldr	r2, [pc, #24]	; (80049dc <vTaskSwitchContext+0xb0>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000d00 	.word	0x20000d00
 80049d8:	20000cec 	.word	0x20000cec
 80049dc:	20000ce0 	.word	0x20000ce0
 80049e0:	20000808 	.word	0x20000808
 80049e4:	20000804 	.word	0x20000804

080049e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60fb      	str	r3, [r7, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <vTaskPlaceOnEventList+0x44>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3318      	adds	r3, #24
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fe93 	bl	8003742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	6838      	ldr	r0, [r7, #0]
 8004a20:	f000 fa82 	bl	8004f28 <prvAddCurrentTaskToDelayedList>
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000804 	.word	0x20000804

08004a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	617b      	str	r3, [r7, #20]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	4619      	mov	r1, r3
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7fe fe4a 	bl	80036fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f000 fa57 	bl	8004f28 <prvAddCurrentTaskToDelayedList>
	}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000804 	.word	0x20000804

08004a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fe7b 	bl	80037b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <xTaskRemoveFromEventList+0xb0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11d      	bne.n	8004b02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fe72 	bl	80037b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <xTaskRemoveFromEventList+0xb4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d903      	bls.n	8004ae4 <xTaskRemoveFromEventList+0x5c>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <xTaskRemoveFromEventList+0xb4>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <xTaskRemoveFromEventList+0xb8>)
 8004af2:	441a      	add	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe fdfd 	bl	80036fa <vListInsertEnd>
 8004b00:	e005      	b.n	8004b0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	3318      	adds	r3, #24
 8004b06:	4619      	mov	r1, r3
 8004b08:	480e      	ldr	r0, [pc, #56]	; (8004b44 <xTaskRemoveFromEventList+0xbc>)
 8004b0a:	f7fe fdf6 	bl	80036fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <xTaskRemoveFromEventList+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d905      	bls.n	8004b28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <xTaskRemoveFromEventList+0xc4>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e001      	b.n	8004b2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b2c:	697b      	ldr	r3, [r7, #20]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000d00 	.word	0x20000d00
 8004b3c:	20000ce0 	.word	0x20000ce0
 8004b40:	20000808 	.word	0x20000808
 8004b44:	20000c98 	.word	0x20000c98
 8004b48:	20000804 	.word	0x20000804
 8004b4c:	20000cec 	.word	0x20000cec

08004b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <vTaskInternalSetTimeOutState+0x24>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <vTaskInternalSetTimeOutState+0x28>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000cf0 	.word	0x20000cf0
 8004b78:	20000cdc 	.word	0x20000cdc

08004b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	613b      	str	r3, [r7, #16]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004bbe:	f000 fe49 	bl	8005854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <xTaskCheckForTimeOut+0xbc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d102      	bne.n	8004be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e023      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <xTaskCheckForTimeOut+0xc0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d007      	beq.n	8004bfe <xTaskCheckForTimeOut+0x82>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e015      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d20b      	bcs.n	8004c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff9b 	bl	8004b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e004      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c26:	2301      	movs	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c2a:	f000 fe43 	bl	80058b4 <vPortExitCritical>

	return xReturn;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000cdc 	.word	0x20000cdc
 8004c3c:	20000cf0 	.word	0x20000cf0

08004c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <vTaskMissedYield+0x14>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	20000cec 	.word	0x20000cec

08004c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c60:	f000 f852 	bl	8004d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <prvIdleTask+0x28>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d9f9      	bls.n	8004c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <prvIdleTask+0x2c>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c7c:	e7f0      	b.n	8004c60 <prvIdleTask+0x8>
 8004c7e:	bf00      	nop
 8004c80:	20000808 	.word	0x20000808
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	e00c      	b.n	8004cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <prvInitialiseTaskLists+0x60>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fcfc 	bl	80036a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b37      	cmp	r3, #55	; 0x37
 8004cb2:	d9ef      	bls.n	8004c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cb4:	480d      	ldr	r0, [pc, #52]	; (8004cec <prvInitialiseTaskLists+0x64>)
 8004cb6:	f7fe fcf3 	bl	80036a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cba:	480d      	ldr	r0, [pc, #52]	; (8004cf0 <prvInitialiseTaskLists+0x68>)
 8004cbc:	f7fe fcf0 	bl	80036a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cc0:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <prvInitialiseTaskLists+0x6c>)
 8004cc2:	f7fe fced 	bl	80036a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cc6:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <prvInitialiseTaskLists+0x70>)
 8004cc8:	f7fe fcea 	bl	80036a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ccc:	480b      	ldr	r0, [pc, #44]	; (8004cfc <prvInitialiseTaskLists+0x74>)
 8004cce:	f7fe fce7 	bl	80036a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <prvInitialiseTaskLists+0x78>)
 8004cd4:	4a05      	ldr	r2, [pc, #20]	; (8004cec <prvInitialiseTaskLists+0x64>)
 8004cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvInitialiseTaskLists+0x7c>)
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <prvInitialiseTaskLists+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000808 	.word	0x20000808
 8004cec:	20000c68 	.word	0x20000c68
 8004cf0:	20000c7c 	.word	0x20000c7c
 8004cf4:	20000c98 	.word	0x20000c98
 8004cf8:	20000cac 	.word	0x20000cac
 8004cfc:	20000cc4 	.word	0x20000cc4
 8004d00:	20000c90 	.word	0x20000c90
 8004d04:	20000c94 	.word	0x20000c94

08004d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d0e:	e019      	b.n	8004d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d10:	f000 fda0 	bl	8005854 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <prvCheckTasksWaitingTermination+0x50>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fd47 	bl	80037b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <prvCheckTasksWaitingTermination+0x54>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <prvCheckTasksWaitingTermination+0x54>)
 8004d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d3a:	f000 fdbb 	bl	80058b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f810 	bl	8004d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e1      	bne.n	8004d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000cac 	.word	0x20000cac
 8004d5c:	20000cd8 	.word	0x20000cd8
 8004d60:	20000cc0 	.word	0x20000cc0

08004d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 ff50 	bl	8005c20 <vPortFree>
				vPortFree( pxTCB );
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 ff4d 	bl	8005c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d86:	e018      	b.n	8004dba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d103      	bne.n	8004d9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 ff44 	bl	8005c20 <vPortFree>
	}
 8004d98:	e00f      	b.n	8004dba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d00a      	beq.n	8004dba <prvDeleteTCB+0x56>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <prvDeleteTCB+0x54>
	}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <prvResetNextTaskUnblockTime+0x44>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <prvResetNextTaskUnblockTime+0x14>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <prvResetNextTaskUnblockTime+0x16>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <prvResetNextTaskUnblockTime+0x48>)
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004de6:	e008      	b.n	8004dfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <prvResetNextTaskUnblockTime+0x44>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <prvResetNextTaskUnblockTime+0x48>)
 8004df8:	6013      	str	r3, [r2, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000c90 	.word	0x20000c90
 8004e0c:	20000cf8 	.word	0x20000cf8

08004e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <xTaskGetSchedulerState+0x34>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	e008      	b.n	8004e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <xTaskGetSchedulerState+0x38>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	e001      	b.n	8004e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e36:	687b      	ldr	r3, [r7, #4]
	}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	20000ce4 	.word	0x20000ce4
 8004e48:	20000d00 	.word	0x20000d00

08004e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d056      	beq.n	8004f10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <xTaskPriorityDisinherit+0xd0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d00a      	beq.n	8004e82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60fb      	str	r3, [r7, #12]
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60bb      	str	r3, [r7, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d02c      	beq.n	8004f10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d128      	bne.n	8004f10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fc76 	bl	80037b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <xTaskPriorityDisinherit+0xd4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d903      	bls.n	8004ef0 <xTaskPriorityDisinherit+0xa4>
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <xTaskPriorityDisinherit+0xd4>)
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <xTaskPriorityDisinherit+0xd8>)
 8004efe:	441a      	add	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7fe fbf7 	bl	80036fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f10:	697b      	ldr	r3, [r7, #20]
	}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000804 	.word	0x20000804
 8004f20:	20000ce0 	.word	0x20000ce0
 8004f24:	20000808 	.word	0x20000808

08004f28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f38:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fc38 	bl	80037b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d10a      	bne.n	8004f62 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4819      	ldr	r0, [pc, #100]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f5c:	f7fe fbcd 	bl	80036fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f60:	e026      	b.n	8004fb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d209      	bcs.n	8004f8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7fe fbdb 	bl	8003742 <vListInsert>
}
 8004f8c:	e010      	b.n	8004fb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fe fbd1 	bl	8003742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d202      	bcs.n	8004fb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004faa:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000cdc 	.word	0x20000cdc
 8004fbc:	20000804 	.word	0x20000804
 8004fc0:	20000cc4 	.word	0x20000cc4
 8004fc4:	20000c94 	.word	0x20000c94
 8004fc8:	20000c90 	.word	0x20000c90
 8004fcc:	20000cf8 	.word	0x20000cf8

08004fd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fda:	f000 facb 	bl	8005574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <xTimerCreateTimerTask+0x80>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d021      	beq.n	800502a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fee:	1d3a      	adds	r2, r7, #4
 8004ff0:	f107 0108 	add.w	r1, r7, #8
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe fb37 	bl	800366c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	9202      	str	r2, [sp, #8]
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	2302      	movs	r3, #2
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	460a      	mov	r2, r1
 8005010:	4910      	ldr	r1, [pc, #64]	; (8005054 <xTimerCreateTimerTask+0x84>)
 8005012:	4811      	ldr	r0, [pc, #68]	; (8005058 <xTimerCreateTimerTask+0x88>)
 8005014:	f7ff f8de 	bl	80041d4 <xTaskCreateStatic>
 8005018:	4603      	mov	r3, r0
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <xTimerCreateTimerTask+0x8c>)
 800501c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <xTimerCreateTimerTask+0x8c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005026:	2301      	movs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	613b      	str	r3, [r7, #16]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005046:	697b      	ldr	r3, [r7, #20]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000d34 	.word	0x20000d34
 8005054:	08005ef0 	.word	0x08005ef0
 8005058:	0800517d 	.word	0x0800517d
 800505c:	20000d38 	.word	0x20000d38

08005060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800508e:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <xTimerGenericCommand+0x98>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02a      	beq.n	80050ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	dc18      	bgt.n	80050da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050a8:	f7ff feb2 	bl	8004e10 <xTaskGetSchedulerState>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d109      	bne.n	80050c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <xTimerGenericCommand+0x98>)
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f107 0110 	add.w	r1, r7, #16
 80050ba:	2300      	movs	r3, #0
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	f7fe fca5 	bl	8003a0c <xQueueGenericSend>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24
 80050c4:	e012      	b.n	80050ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <xTimerGenericCommand+0x98>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	f107 0110 	add.w	r1, r7, #16
 80050ce:	2300      	movs	r3, #0
 80050d0:	2200      	movs	r2, #0
 80050d2:	f7fe fc9b 	bl	8003a0c <xQueueGenericSend>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24
 80050d8:	e008      	b.n	80050ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <xTimerGenericCommand+0x98>)
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	f107 0110 	add.w	r1, r7, #16
 80050e2:	2300      	movs	r3, #0
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	f7fe fd8f 	bl	8003c08 <xQueueGenericSendFromISR>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000d34 	.word	0x20000d34

080050fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <prvProcessExpiredTimer+0x7c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fb4d 	bl	80037b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d122      	bne.n	8005168 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	18d1      	adds	r1, r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	f000 f8c8 	bl	80052c4 <prvInsertTimerInActiveList>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800513a:	2300      	movs	r3, #0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	2100      	movs	r1, #0
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f7ff ff8b 	bl	8005060 <xTimerGenericCommand>
 800514a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	4798      	blx	r3
}
 8005170:	bf00      	nop
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000d2c 	.word	0x20000d2c

0800517c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f857 	bl	800523c <prvGetNextExpireTime>
 800518e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4619      	mov	r1, r3
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f803 	bl	80051a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800519a:	f000 f8d5 	bl	8005348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800519e:	e7f1      	b.n	8005184 <prvTimerTask+0x8>

080051a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051aa:	f7ff fa45 	bl	8004638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f866 	bl	8005284 <prvSampleTimeNow>
 80051b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d130      	bne.n	8005222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <prvProcessTimerOrBlockTask+0x3c>
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d806      	bhi.n	80051dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051ce:	f7ff fa41 	bl	8004654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff ff91 	bl	80050fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051da:	e024      	b.n	8005226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <prvProcessTimerOrBlockTask+0x90>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <prvProcessTimerOrBlockTask+0x94>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	4619      	mov	r1, r3
 8005202:	f7fe ffb3 	bl	800416c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005206:	f7ff fa25 	bl	8004654 <xTaskResumeAll>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <prvProcessTimerOrBlockTask+0x98>)
 8005212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
}
 8005220:	e001      	b.n	8005226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005222:	f7ff fa17 	bl	8004654 <xTaskResumeAll>
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000d30 	.word	0x20000d30
 8005234:	20000d34 	.word	0x20000d34
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <prvGetNextExpireTime+0x44>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <prvGetNextExpireTime+0x44>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e001      	b.n	8005272 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000d2c 	.word	0x20000d2c

08005284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800528c:	f7ff fa80 	bl	8004790 <xTaskGetTickCount>
 8005290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvSampleTimeNow+0x3c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	429a      	cmp	r2, r3
 800529a:	d205      	bcs.n	80052a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800529c:	f000 f908 	bl	80054b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e002      	b.n	80052ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052ae:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <prvSampleTimeNow+0x3c>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000d3c 	.word	0x20000d3c

080052c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d812      	bhi.n	8005310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	1ad2      	subs	r2, r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e01b      	b.n	8005336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <prvInsertTimerInActiveList+0x7c>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7fe fa1a 	bl	8003742 <vListInsert>
 800530e:	e012      	b.n	8005336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d206      	bcs.n	8005326 <prvInsertTimerInActiveList+0x62>
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005320:	2301      	movs	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e007      	b.n	8005336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvInsertTimerInActiveList+0x80>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7fe fa06 	bl	8003742 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000d30 	.word	0x20000d30
 8005344:	20000d2c 	.word	0x20000d2c

08005348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08e      	sub	sp, #56	; 0x38
 800534c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800534e:	e09d      	b.n	800548c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da18      	bge.n	8005388 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	3304      	adds	r3, #4
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	61fb      	str	r3, [r7, #28]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537e:	6850      	ldr	r0, [r2, #4]
 8005380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005382:	6892      	ldr	r2, [r2, #8]
 8005384:	4611      	mov	r1, r2
 8005386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db7d      	blt.n	800548a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	3304      	adds	r3, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fa08 	bl	80037b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053a4:	463b      	mov	r3, r7
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff6c 	bl	8005284 <prvSampleTimeNow>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d86b      	bhi.n	800548c <prvProcessReceivedCommands+0x144>
 80053b4:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <prvProcessReceivedCommands+0x74>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	0800548d 	.word	0x0800548d
 80053cc:	08005441 	.word	0x08005441
 80053d0:	08005479 	.word	0x08005479
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	080053e5 	.word	0x080053e5
 80053dc:	0800548d 	.word	0x0800548d
 80053e0:	08005441 	.word	0x08005441
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	18d1      	adds	r1, r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f7ff ff67 	bl	80052c4 <prvInsertTimerInActiveList>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d047      	beq.n	800548c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d13f      	bne.n	800548c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	441a      	add	r2, r3
 8005414:	2300      	movs	r3, #0
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2300      	movs	r3, #0
 800541a:	2100      	movs	r1, #0
 800541c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541e:	f7ff fe1f 	bl	8005060 <xTimerGenericCommand>
 8005422:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d130      	bne.n	800548c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61bb      	str	r3, [r7, #24]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	18d1      	adds	r1, r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f7ff ff27 	bl	80052c4 <prvInsertTimerInActiveList>
					break;
 8005476:	e009      	b.n	800548c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005484:	f000 fbcc 	bl	8005c20 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005488:	e000      	b.n	800548c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800548a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <prvProcessReceivedCommands+0x164>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1d39      	adds	r1, r7, #4
 8005492:	2200      	movs	r2, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fc4f 	bl	8003d38 <xQueueReceive>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af57 	bne.w	8005350 <prvProcessReceivedCommands+0x8>
	}
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	3730      	adds	r7, #48	; 0x30
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000d34 	.word	0x20000d34

080054b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054b6:	e045      	b.n	8005544 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054b8:	4b2c      	ldr	r3, [pc, #176]	; (800556c <prvSwitchTimerLists+0xbc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <prvSwitchTimerLists+0xbc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe f96f 	bl	80037b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d12e      	bne.n	8005544 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4413      	add	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d90e      	bls.n	8005516 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <prvSwitchTimerLists+0xbc>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7fe f917 	bl	8003742 <vListInsert>
 8005514:	e016      	b.n	8005544 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005516:	2300      	movs	r3, #0
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	2100      	movs	r1, #0
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fd9d 	bl	8005060 <xTimerGenericCommand>
 8005526:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <prvSwitchTimerLists+0x94>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	603b      	str	r3, [r7, #0]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <prvSwitchTimerLists+0xbc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1b4      	bne.n	80054b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <prvSwitchTimerLists+0xbc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <prvSwitchTimerLists+0xc0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <prvSwitchTimerLists+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <prvSwitchTimerLists+0xc0>)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6013      	str	r3, [r2, #0]
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000d2c 	.word	0x20000d2c
 8005570:	20000d30 	.word	0x20000d30

08005574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800557a:	f000 f96b 	bl	8005854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <prvCheckForValidListAndQueue+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d120      	bne.n	80055c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005586:	4814      	ldr	r0, [pc, #80]	; (80055d8 <prvCheckForValidListAndQueue+0x64>)
 8005588:	f7fe f88a 	bl	80036a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800558c:	4813      	ldr	r0, [pc, #76]	; (80055dc <prvCheckForValidListAndQueue+0x68>)
 800558e:	f7fe f887 	bl	80036a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <prvCheckForValidListAndQueue+0x6c>)
 8005594:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <prvCheckForValidListAndQueue+0x64>)
 8005596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <prvCheckForValidListAndQueue+0x70>)
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <prvCheckForValidListAndQueue+0x68>)
 800559c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800559e:	2300      	movs	r3, #0
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <prvCheckForValidListAndQueue+0x74>)
 80055a4:	4a11      	ldr	r2, [pc, #68]	; (80055ec <prvCheckForValidListAndQueue+0x78>)
 80055a6:	2110      	movs	r1, #16
 80055a8:	200a      	movs	r0, #10
 80055aa:	f7fe f995 	bl	80038d8 <xQueueGenericCreateStatic>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <prvCheckForValidListAndQueue+0x60>)
 80055b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <prvCheckForValidListAndQueue+0x60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <prvCheckForValidListAndQueue+0x60>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	490b      	ldr	r1, [pc, #44]	; (80055f0 <prvCheckForValidListAndQueue+0x7c>)
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fda8 	bl	8004118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c8:	f000 f974 	bl	80058b4 <vPortExitCritical>
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000d34 	.word	0x20000d34
 80055d8:	20000d04 	.word	0x20000d04
 80055dc:	20000d18 	.word	0x20000d18
 80055e0:	20000d2c 	.word	0x20000d2c
 80055e4:	20000d30 	.word	0x20000d30
 80055e8:	20000de0 	.word	0x20000de0
 80055ec:	20000d40 	.word	0x20000d40
 80055f0:	08005ef8 	.word	0x08005ef8

080055f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b04      	subs	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b04      	subs	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <pxPortInitialiseStack+0x64>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3b14      	subs	r3, #20
 800562e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3b04      	subs	r3, #4
 800563a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f06f 0202 	mvn.w	r2, #2
 8005642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b20      	subs	r3, #32
 8005648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	0800565d 	.word	0x0800565d

0800565c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <prvTaskExitError+0x54>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d00a      	beq.n	8005686 <prvTaskExitError+0x2a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <prvTaskExitError+0x28>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60bb      	str	r3, [r7, #8]
}
 8005698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800569a:	bf00      	nop
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0fc      	beq.n	800569c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	2000000c 	.word	0x2000000c
	...

080056c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <pxCurrentTCBConst2>)
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f380 8809 	msr	PSP, r0
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	4770      	bx	lr
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst2>:
 80056e0:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <prvPortStartFirstTask+0x24>)
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	6800      	ldr	r0, [r0, #0]
 80056ee:	f380 8808 	msr	MSP, r0
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8814 	msr	CONTROL, r0
 80056fa:	b662      	cpsie	i
 80056fc:	b661      	cpsie	f
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	df00      	svc	0
 8005708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800570a:	bf00      	nop
 800570c:	e000ed08 	.word	0xe000ed08

08005710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005716:	4b46      	ldr	r3, [pc, #280]	; (8005830 <xPortStartScheduler+0x120>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a46      	ldr	r2, [pc, #280]	; (8005834 <xPortStartScheduler+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10a      	bne.n	8005736 <xPortStartScheduler+0x26>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005736:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <xPortStartScheduler+0x120>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <xPortStartScheduler+0x128>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10a      	bne.n	8005756 <xPortStartScheduler+0x46>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005756:	4b39      	ldr	r3, [pc, #228]	; (800583c <xPortStartScheduler+0x12c>)
 8005758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <xPortStartScheduler+0x130>)
 800577c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <xPortStartScheduler+0x134>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005784:	e009      	b.n	800579a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <xPortStartScheduler+0x134>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <xPortStartScheduler+0x134>)
 800578e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d0ef      	beq.n	8005786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <xPortStartScheduler+0x134>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d00a      	beq.n	80057c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60bb      	str	r3, [r7, #8]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057c8:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <xPortStartScheduler+0x134>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <xPortStartScheduler+0x134>)
 80057d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <xPortStartScheduler+0x134>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <xPortStartScheduler+0x134>)
 80057dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <xPortStartScheduler+0x138>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <xPortStartScheduler+0x138>)
 80057ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <xPortStartScheduler+0x138>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a14      	ldr	r2, [pc, #80]	; (8005848 <xPortStartScheduler+0x138>)
 80057f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057fe:	f000 f8dd 	bl	80059bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <xPortStartScheduler+0x13c>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005808:	f000 f8fc 	bl	8005a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800580c:	4b10      	ldr	r3, [pc, #64]	; (8005850 <xPortStartScheduler+0x140>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0f      	ldr	r2, [pc, #60]	; (8005850 <xPortStartScheduler+0x140>)
 8005812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005818:	f7ff ff66 	bl	80056e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800581c:	f7ff f886 	bl	800492c <vTaskSwitchContext>
	prvTaskExitError();
 8005820:	f7ff ff1c 	bl	800565c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000ed00 	.word	0xe000ed00
 8005834:	410fc271 	.word	0x410fc271
 8005838:	410fc270 	.word	0x410fc270
 800583c:	e000e400 	.word	0xe000e400
 8005840:	20000e30 	.word	0x20000e30
 8005844:	20000e34 	.word	0x20000e34
 8005848:	e000ed20 	.word	0xe000ed20
 800584c:	2000000c 	.word	0x2000000c
 8005850:	e000ef34 	.word	0xe000ef34

08005854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
}
 800586c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <vPortEnterCritical+0x58>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <vPortEnterCritical+0x58>)
 8005876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <vPortEnterCritical+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d10f      	bne.n	80058a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <vPortEnterCritical+0x5c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	603b      	str	r3, [r7, #0]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <vPortEnterCritical+0x4a>
	}
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ba:	4b12      	ldr	r3, [pc, #72]	; (8005904 <vPortExitCritical+0x50>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <vPortExitCritical+0x24>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	607b      	str	r3, [r7, #4]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <vPortExitCritical+0x50>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3b01      	subs	r3, #1
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <vPortExitCritical+0x50>)
 80058e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <vPortExitCritical+0x50>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <vPortExitCritical+0x42>
 80058ea:	2300      	movs	r3, #0
 80058ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f383 8811 	msr	BASEPRI, r3
}
 80058f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	2000000c 	.word	0x2000000c
	...

08005910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005910:	f3ef 8009 	mrs	r0, PSP
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <pxCurrentTCBConst>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f01e 0f10 	tst.w	lr, #16
 8005920:	bf08      	it	eq
 8005922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005934:	f380 8811 	msr	BASEPRI, r0
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f7fe fff4 	bl	800492c <vTaskSwitchContext>
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f380 8811 	msr	BASEPRI, r0
 800594c:	bc09      	pop	{r0, r3}
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	6808      	ldr	r0, [r1, #0]
 8005952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005956:	f01e 0f10 	tst.w	lr, #16
 800595a:	bf08      	it	eq
 800595c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005960:	f380 8809 	msr	PSP, r0
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst>:
 8005970:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	607b      	str	r3, [r7, #4]
}
 8005990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005992:	f7fe ff0d 	bl	80047b0 <xTaskIncrementTick>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <SysTick_Handler+0x40>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <vPortSetupTimerInterrupt+0x38>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <vPortSetupTimerInterrupt+0x3c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <vPortSetupTimerInterrupt+0x40>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <vPortSetupTimerInterrupt+0x44>)
 80059da:	3b01      	subs	r3, #1
 80059dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059e0:	2207      	movs	r2, #7
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000e010 	.word	0xe000e010
 80059f4:	e000e018 	.word	0xe000e018
 80059f8:	20000000 	.word	0x20000000
 80059fc:	10624dd3 	.word	0x10624dd3
 8005a00:	e000e014 	.word	0xe000e014

08005a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a14 <vPortEnableVFP+0x10>
 8005a08:	6801      	ldr	r1, [r0, #0]
 8005a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a0e:	6001      	str	r1, [r0, #0]
 8005a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a12:	bf00      	nop
 8005a14:	e000ed88 	.word	0xe000ed88

08005a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a1e:	f3ef 8305 	mrs	r3, IPSR
 8005a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d914      	bls.n	8005a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a2a:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <vPortValidateInterruptPriority+0x70>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a34:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <vPortValidateInterruptPriority+0x74>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	7afa      	ldrb	r2, [r7, #11]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d20a      	bcs.n	8005a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <vPortValidateInterruptPriority+0x78>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <vPortValidateInterruptPriority+0x7c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d90a      	bls.n	8005a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	603b      	str	r3, [r7, #0]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <vPortValidateInterruptPriority+0x60>
	}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	e000e3f0 	.word	0xe000e3f0
 8005a8c:	20000e30 	.word	0x20000e30
 8005a90:	e000ed0c 	.word	0xe000ed0c
 8005a94:	20000e34 	.word	0x20000e34

08005a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aa4:	f7fe fdc8 	bl	8004638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa8:	4b58      	ldr	r3, [pc, #352]	; (8005c0c <pvPortMalloc+0x174>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ab0:	f000 f910 	bl	8005cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ab4:	4b56      	ldr	r3, [pc, #344]	; (8005c10 <pvPortMalloc+0x178>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 808e 	bne.w	8005bde <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01d      	beq.n	8005b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ac8:	2208      	movs	r2, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d014      	beq.n	8005b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <pvPortMalloc+0x6c>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	617b      	str	r3, [r7, #20]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d069      	beq.n	8005bde <pvPortMalloc+0x146>
 8005b0a:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <pvPortMalloc+0x17c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d864      	bhi.n	8005bde <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b14:	4b40      	ldr	r3, [pc, #256]	; (8005c18 <pvPortMalloc+0x180>)
 8005b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <pvPortMalloc+0x180>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b1e:	e004      	b.n	8005b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <pvPortMalloc+0xa4>
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f1      	bne.n	8005b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b3c:	4b33      	ldr	r3, [pc, #204]	; (8005c0c <pvPortMalloc+0x174>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d04b      	beq.n	8005bde <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	2308      	movs	r3, #8
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d91f      	bls.n	8005ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <pvPortMalloc+0xf8>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	613b      	str	r3, [r7, #16]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ba2:	69b8      	ldr	r0, [r7, #24]
 8005ba4:	f000 f8f8 	bl	8005d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <pvPortMalloc+0x17c>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <pvPortMalloc+0x17c>)
 8005bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <pvPortMalloc+0x17c>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <pvPortMalloc+0x184>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d203      	bcs.n	8005bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <pvPortMalloc+0x17c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <pvPortMalloc+0x184>)
 8005bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <pvPortMalloc+0x178>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bde:	f7fe fd39 	bl	8004654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <pvPortMalloc+0x16a>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <pvPortMalloc+0x168>
	return pvReturn;
 8005c02:	69fb      	ldr	r3, [r7, #28]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20001a40 	.word	0x20001a40
 8005c10:	20001a4c 	.word	0x20001a4c
 8005c14:	20001a44 	.word	0x20001a44
 8005c18:	20001a38 	.word	0x20001a38
 8005c1c:	20001a48 	.word	0x20001a48

08005c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d048      	beq.n	8005cc4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c32:	2308      	movs	r3, #8
 8005c34:	425b      	negs	r3, r3
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <vPortFree+0xac>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <vPortFree+0x44>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60fb      	str	r3, [r7, #12]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <vPortFree+0x62>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60bb      	str	r3, [r7, #8]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <vPortFree+0xac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d019      	beq.n	8005cc4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d115      	bne.n	8005cc4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <vPortFree+0xac>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ca8:	f7fe fcc6 	bl	8004638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <vPortFree+0xb0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <vPortFree+0xb0>)
 8005cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cba:	6938      	ldr	r0, [r7, #16]
 8005cbc:	f000 f86c 	bl	8005d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cc0:	f7fe fcc8 	bl	8004654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20001a4c 	.word	0x20001a4c
 8005cd0:	20001a44 	.word	0x20001a44

08005cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <prvHeapInit+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <prvHeapInit+0xac>)
 8005d04:	4413      	add	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <prvHeapInit+0xb0>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d12:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <prvHeapInit+0xb0>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d20:	2208      	movs	r2, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <prvHeapInit+0xb4>)
 8005d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <prvHeapInit+0xb4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <prvHeapInit+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvHeapInit+0xb4>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <prvHeapInit+0xb8>)
 8005d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <prvHeapInit+0xbc>)
 8005d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <prvHeapInit+0xc0>)
 8005d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d72:	601a      	str	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000e38 	.word	0x20000e38
 8005d84:	20001a38 	.word	0x20001a38
 8005d88:	20001a40 	.word	0x20001a40
 8005d8c:	20001a48 	.word	0x20001a48
 8005d90:	20001a44 	.word	0x20001a44
 8005d94:	20001a4c 	.word	0x20001a4c

08005d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da0:	4b28      	ldr	r3, [pc, #160]	; (8005e44 <prvInsertBlockIntoFreeList+0xac>)
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e002      	b.n	8005dac <prvInsertBlockIntoFreeList+0x14>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d8f7      	bhi.n	8005da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d108      	bne.n	8005dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d118      	bne.n	8005e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00d      	beq.n	8005e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e008      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e003      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d002      	beq.n	8005e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20001a38 	.word	0x20001a38
 8005e48:	20001a40 	.word	0x20001a40

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4d0d      	ldr	r5, [pc, #52]	; (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	; (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1b64      	subs	r4, r4, r5
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2600      	movs	r6, #0
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4d0b      	ldr	r5, [pc, #44]	; (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	; (8005e90 <__libc_init_array+0x44>)
 8005e60:	f000 f82e 	bl	8005ec0 <_init>
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2600      	movs	r6, #0
 8005e6a:	42a6      	cmp	r6, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e74:	4798      	blx	r3
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7e:	4798      	blx	r3
 8005e80:	3601      	adds	r6, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08005f80 	.word	0x08005f80
 8005e88:	08005f80 	.word	0x08005f80
 8005e8c:	08005f80 	.word	0x08005f80
 8005e90:	08005f84 	.word	0x08005f84

08005e94 <memcpy>:
 8005e94:	440a      	add	r2, r1
 8005e96:	4291      	cmp	r1, r2
 8005e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e9c:	d100      	bne.n	8005ea0 <memcpy+0xc>
 8005e9e:	4770      	bx	lr
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	d1f9      	bne.n	8005ea2 <memcpy+0xe>
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <memset>:
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	f803 1b01 	strb.w	r1, [r3], #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
